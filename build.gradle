plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

// 先声明仓库与依赖，确保 SDK 的 run types 可用
repositories {
    // 官方中心仓库
    mavenCentral()
    // NeoForged 依赖仓库（运行时/编译期 API 来源）
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    // 可选：CurseMaven 仅用于运行时拉取其他整合包/模组
    maven {
        url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    // annotation processor 仍用于生成 mixin refmap
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // 运行时模组（使用用户提供的固定文件ID）
//    runtimeOnly "curse.maven:jade-324717:5835088"
//    runtimeOnly "curse.maven:modernui-352491:5040036"
}

// 使用 NeoGradle 的 runs DSL
runs {
    // applies to all the run configs below
    configureEach {
        // 允许 Netty 访问 Unsafe
        jvmArguments(
            '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED',
            '--add-opens=java.base/java.lang=ALL-UNNAMED'
        )

        workingDirectory project.file('run')

        // JVM 参数（移除不兼容的 AllowEnhancedClassRedefinition）
        jvmArguments '-Djava.awt.headless=true'

        // 推荐日志配置
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        // 将当前项目作为本地 mod 源加入运行环境
        modSource sourceSets.main
    }

    client { /* 默认 client 运行 */ }

    server {
        // '--nogui'
        programArguments = ['--nogui']
    }

    gameTestServer {
        // 仅在需要时启用命名空间的 GameTest
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    data {
        // 覆盖工作目录
        workingDirectory project.file('run-data')
        // 数据生成参数
        arguments '--mod', mod_id, '--all',
                '--output', file('src/generated/resources/').toString(),
                '--existing', file('src/main/resources/').toString()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// 展开属性并针对 NeoForge 的 neoforge.mods.toml 做替换
tasks.named('processResources', ProcessResources).configure {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand([
                minecraft_version      : project.property('minecraft_version'),
                minecraft_version_range: project.property('minecraft_version_range'),
                neoforge_version       : project.property('neoforge_version'),
                neoforge_version_range : project.property('neoforge_version_range'),
                mod_id                 : project.property('mod_id'),
                mod_name               : project.property('mod_name'),
                mod_license            : project.property('mod_license'),
                mod_version            : project.property('mod_version'),
                mod_authors            : project.property('mod_authors'),
                mod_description        : project.property('mod_description')
        ])
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// 添加强制清理任务
task forceClean(type: Delete) {
    delete buildDir
    doFirst {
        println "Forcing clean of build directory..."
    }
}
